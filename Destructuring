ClojureScript Koans Destructuring Answers
http://clojurescriptkoans.com/#destructuring/1

(def test-address
  {:street-address "123 Test Lane"
   :city "Testerville"
   :state "TX"})

1)Destructuring is an arbiter: it breaks up arguments

(= ":bar:foo" ((fn [[a b]] (str b a)) [:foo :bar]))


2)Whether in function definitions

(= (str "First comes love, " "then comes marriage, " "then comes Clojure with the baby carriage") ((fn [[a b c]] (str "First comes "  a ", then comes " b ", then comes " c " with the baby carriage" )) ["love" "marriage" "Clojure"]))


3)Or in let expressions

(= "Rich Hickey aka The Clojurer aka Go Time aka Macro Killah" (let [[first-name last-name & aliases] (list "Rich" "Hickey" "The Clojurer" "Go Time" "Macro Killah")] (str first-name " " (apply str (interpose " aka " (conj aliases last-name))))))


4)You can regain the full argument if you like arguing

(= {:original-parts ["Stephen" "Hawking"], :named-parts {:first "Stephen", :last "Hawking"}} (let [[first-name last-name :as full-name] ["Stephen" "Hawking"]] {:original-parts full-name :named-parts {:first first-name :last last-name}} ))


5)Break up maps by key

(= "123 Test Lane, Testerville, TX" (let [{street-address :street-address, city :city, state :state} test-address] (apply str (interpose ", " [street-address city state]))))


6)Or more succinctly

(= "123 Test Lane, Testerville, TX" (let [{:keys [street-address  city state ]} test-address] (apply str (interpose ", " [street-address city state]))))


7)All together now!

(= "Test Testerson, 123 Test Lane, Testerville, TX" ( (fn [v m] (let [{:keys [city state street-address]} m]  (apply str (interpose ", " [(apply str (interpose " " v)) street-address city state])))) ["Test" "Testerson"] test-address))
